
@import "./_variables.scss";

/*Vendor prefix mixin*/

@mixin prefix($property, $arguments...) {
	@each $prefix in -webkit-, -moz-, -ms-, -o- {
		#{$prefix}#{$property}: $arguments;
		#{$property}: $arguments;
	}
}




/*@keyframes mixins (animation mixins)*/

@keyframes slide-vertical {
	from {
		margin-bottom: 20%;
		height: 50%;
	} 

	to {
		margin-bottom: 100%;
		height: 200%;
	}
} 

@keyframes ease {
	from {
		max-height: 0%;
	} 

	to {
		max-height: 100%;
	}
} 

/*Icon mixins*/

@mixin circle($height, $width, $border-radius) {
	height: $height;
	width: $width;
	-ms-border-radius: $border-radius;
	moz-border-radius: $border-radius;
	-webkit-border-radius: $border-radius;
	border-radius: $border-radius;
}


/*Only input a string value for the $direction argument, leave the position
argument unquoted in order for the CSS to render properly*/
@mixin triangle-eq($position, $direction, $border-width, $color, $height: 0, $width: 0) {
	height: $height;
	width: $width;
	position: $position;

	@if $direction == up {
		border-left: $border-width solid transparent;
		border-right: $border-width solid transparent;
		border-bottom: $border-width solid $color;
	}

	@if $direction == right {
		border-top: $border-width solid transparent;
		border-left: $border-width solid $color;
		border-bottom: $border-width solid transparent;
	}

	@if $direction == down {
		border-left: $border-width solid transparent;
		border-right: $border-width solid transparent;
		border-top: $border-width solid $color;
	}

	@if $direction == left {
		border-top: $border-width solid transparent;
		border-right: $border-width solid $color;
		border-bottom: $border-width solid transparent;
	}
}


@mixin arrow($position, $direction, $border-width, $border-color, $border-style, $padding: $border-width) {
	display: block;
	padding: $padding;
	position: $position;
	border: $border-style $border-color;
	border-right: $border-width;
	border-bottom: $border-width;

	@if $direction == up {
		@include prefix(transform, rotate(-135deg));
	}
	@if $direction == right {
		@include prefix(transform, rotate(135deg));
	}
	@if $direction == down {
		@include prefix(transform, rotate(225deg));
	}
	@if $direction == left {
		@include prefix(transform, rotate(315deg));
	}
}

@mixin page-corner($position, $corner, $border-width, $border-style, $border-color, $height, $width: $height) {
	position: $position;
	width: $width;
	height: $height;

	@if $corner == top left {
		border-left: $border-width $border-style $border-color;
		border-top: $border-width $border-style $border-color;
	}

	@if $corner == bottom right {
		border-bottom: $border-width $border-style $border-color;
		border-right: $border-width $border-style $border-color;
	}

}

/*Box model dimensions*/


//automatically sets the height as the width by default if height is not specified
@mixin size($width, $height: $width) {
	width: $width;
	height: $height;
}

$columns: 12;

@mixin media-image {
	@for $i from 1 through 6 {
		.media__image-wrapper--#{$i} {
			width: calc((#{$i}/12) * 100%);
			padding: 0.25em;
		}
	}
	@for $i from 7 through 9 {
		.media__image-wrapper--#{$i} {
			width: calc((#{$i}/12) * 100%);
			padding: 0.5em;
		}
	}
	@for $i from 10 through 12 {
		.media__image-wrapper--#{$i} {
			width: calc((#{$i}/12) * 100%);
			padding: 0.75em;
		}
	}	
}


@mixin border($top, $right, $bottom, $left) {
	border-top: $top;
	border-right: $right;
	border-bottom: $bottom;
	border-left: $left;
}

@mixin border-side($direction, $value) {
	border-#{$direction}: $value; 
}

@mixin border-radius($top-left, $top-right, $bottom-right, $bottom-left) {
	border-top-left-radius: $top-left;
	border-top-right-radius: $top-right;
	border-bottom-right-radius: $bottom-right;
	border-bottom-left-radius: $bottom-left;
}


/*Transition Mixins*/


/*
@mixin transition($animations: ()) {
	$transition: map-merge((
		animation-iteration-count: 1,
		animation-duration: 0.3s,
		animation-timing-function: ease,
		animation-fill-mode: both), $animations);

	animation-iteration-count: map-get($transition, animation-iteration-count);
	animation-duration: map-get($transition, animation-duration);
	animation-timing-function: map-get($transition, animation-timing-function);
	animation-fill-mode: map-get($transition, animation-fill-mode);

}
*/


/*Typography Mixins*/

@mixin letter-spacing($value) {
	letter-spacing: $value;
}


/*Box shadow*/

/*Specify inset value as false to turn off inset property value*/ 




/*Flexbox helpers*/
@mixin flex-alignnment($flex, $align-items, $justify-content) {
	flex: $flex;
	align-items: $align-items;
	justify-content: $justify-content;
}


/*MARGIN & PADDING HELPERS*/

/*create a margin or padding offset by plugging in a value and string that represents
the direction of where you want the margin spacing to be applied*/
@mixin margin-side($direction, $value) {
	margin-#{$direction}: $value;
}

@mixin margin($top, $right, $bottom, $left) {
	margin-top: $top;
	margin-right: $right;
	margin-bottom: $bottom;
	margin-left: $left;
}

@mixin padding-side($direction, $value...) {
	padding-#{$direction}: $value;	
}

@mixin padding($top, $right, $bottom, $left) {
	padding-top: $top;
	padding-right: $right;
	padding-bottom: $bottom;
	padding-left: $left;
}


/*Positioning mixins*/

/*Positioning for absolutely positioned items can be set by including numeric values for each arg*/
@mixin abs-positioning($top, $right, $bottom, $left) {
	position: absolute;
	bottom: $bottom;
	left: $left;
	right: $right;
	top: $top;
}

@mixin fixed-positioning($top, $right, $bottom, $left) {
	position: fixed;
	bottom: $bottom;
	left: $left;
	right: $right;
	top: $top;	
}

/*Media Query Mixins*/

@mixin mediaQuery--mobile {
	@media screen and (max-width: #{$mq-mobile}) {
		@content;
	}
}

@mixin mediaQuery--tablet {
	@media screen and (min-width: #{$mq-tablet}) and (max-width: #{$mq-desktop - 1}) {
		@content;
	}
}

@mixin mediaQuery--desktop {
	@media screen and (min-width: #{$mq-desktop}) and (max-width: #{$mq-wide}) {
		@content;
	}
}

@mixin mediaQuery--wide {
	@media screen and (min-width: #{$mq-wide}) {
		@content;
	}
}

@mixin mediaQuery--custom($min-width, $max-width) {
	@media screen and (min-width: #{$min-width}) and (max-width: #{$max-width}) {
		@content;
	} 
}
